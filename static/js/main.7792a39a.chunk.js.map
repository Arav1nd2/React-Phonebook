{"version":3,"sources":["components/NavBar.js","components/Forms.js","components/List.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","react_default","a","createElement","className","href","Component","Forms","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","name","phone","nameErr","phoneErr","phoneRep","handleChange","e","setState","defineProperty","target","value","handleVerify","preventDefault","isNaN","checkNumber","handleAdd","handleNewPhone","objectSpread","id","uuid","onSubmit","placeholder","onChange","type","handleSearch","search","Lists","modalState","handleUpdateClick","handleDeleteClick","prop","uid","updateData","_this2","Fragment","lib","header","open","onClick","class","aria-hidden","App","items","searchRes","data","newItems","push","localStorage","setItem","JSON","stringify","num","i","length","filter","item","forEach","getItem","parse","jsx","toLowerCase","indexOf","List","key","components_NavBar","components_Forms","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7792a39a.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass NavBar extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <nav>\r\n                    <div className = \"nav-wrapper amber darken-1\">\r\n                    <a href=\"/\" className = \"brand-logo center\">React PhoneBook</a>\r\n                    </div>    \r\n                </nav>    \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NavBar;","import React, { Component } from 'react';\r\nimport uuid from 'uuid';\r\n\r\nclass Forms extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: \"\",\r\n            phone: \"\",\r\n            nameErr: false,\r\n            phoneErr: false,\r\n            phoneRep: false\r\n        }\r\n\r\n        this.handleChange = (e) => {\r\n            this.setState({\r\n                nameErr: false,\r\n                phoneErr: false,\r\n                phoneRep: false,\r\n                [e.target.name]: e.target.value\r\n            });\r\n        }\r\n\r\n        this.handleVerify = (e) => {\r\n            e.preventDefault();\r\n            if(this.state.name !== \"\" && !(isNaN(this.state.phone) || this.state.phone === \"\")) {\r\n                if(!this.props.checkNumber(this.state.phone)) {\r\n                    this.handleAdd();\r\n                }\r\n                else {\r\n                    this.setState({\r\n                        phoneRep: true\r\n                    });\r\n                }\r\n            }\r\n            if(this.state.name === \"\" ) {\r\n                this.setState({\r\n                    nameErr : true\r\n                });\r\n            }\r\n            if(isNaN(this.state.phone) || this.state.phone === \"\") {\r\n                this.setState({\r\n                    phoneErr : true\r\n                });\r\n            }\r\n            \r\n        }\r\n        this.handleAdd = () => {\r\n            this.props.handleNewPhone({id: uuid(), ...this.state});\r\n            this.setState({\r\n                name: \"\",\r\n                phone: \"\",\r\n                nameErr: false,\r\n                phoneErr: false,\r\n                phoneRep: false\r\n            });\r\n        }\r\n       \r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div className = \"row\">\r\n                <form className = \"col s12\" onSubmit = {this.handleVerify}>\r\n                    <div className = \"row\">\r\n                        <div className = \"input-field col s5\">\r\n                            <input placeholder = \"Name\" name = \"name\" onChange = {this.handleChange} value = {this.state.name}/>\r\n                            {this.state.nameErr && <span className = \"helper-text red-text\" >Please enter a valid Name</span>}\r\n                        </div>\r\n                        <div className = \"input-field col s5\">\r\n                            <input placeholder = \"Phone Number\" name = \"phone\" onChange ={this.handleChange} value = {this.state.phone}/>\r\n                            {this.state.phoneErr && <span className = \"helper-text red-text\" >Please enter a valid Phone number</span>}\r\n                            {this.state.phoneRep && <span className = \"helper-text red-text\" >Number already exists in the directory!</span>}\r\n                        </div>\r\n                        <div className = \"col s2\">\r\n                            <button type = \"submit\" className = \"btn add-btn\">Add</button>    \r\n                        </div>\r\n                    </div>\r\n                </form>\r\n                <form className = \"col s12\">\r\n                    <div className = \"row\">\r\n                        <div className = \"input-field col s10\">\r\n                            <input placeholder = \"Search\" name = \"search\" onChange = {this.props.handleSearch} value = {this.props.search}/>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Forms;","import React, { Component } from 'react';\r\nimport {Modal} from 'react-materialize';\r\n\r\nclass Lists extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            modalState : false,\r\n            name: \"/\",\r\n            phone : \"/\",\r\n            nameErr: false,\r\n            phoneErr: false,\r\n            phoneRep: false\r\n        }\r\n\r\n        this.handleVerify = () => {\r\n            if((this.state.name !== \"\" || this.state.name !== \"/\") && !(isNaN(this.state.phone) || (this.state.phone === \"\" || this.state.phone === \"/\"))) {\r\n                if(!this.props.checkNumber(this.state.phone)) {\r\n                    this.handleUpdateClick();\r\n                }\r\n                else {\r\n                    this.setState({\r\n                        phoneRep: true\r\n                    });\r\n                }\r\n            }\r\n            if(this.state.name === \"\") {\r\n                this.setState({\r\n                    nameErr : true\r\n                });\r\n            }\r\n            if(isNaN(this.state.phone) || this.state.phone === \"\") {\r\n                this.setState({\r\n                    phoneErr : true\r\n                });\r\n            }   \r\n        }\r\n\r\n        this.handleChange = (e) => {\r\n            this.setState({\r\n                [e.target.name] : e.target.value\r\n            });\r\n        }\r\n        this.handleDeleteClick = () => {\r\n            let prop = {\r\n                type : \"Delete\",\r\n                id : this.props.uid\r\n            }\r\n            this.props.updateData(prop);\r\n            this.setState({\r\n                modalState : false,\r\n                name: \"/\",\r\n                phone : \"/\",\r\n                nameErr: false,\r\n                phoneErr: false,\r\n                phoneRep: false\r\n            });\r\n        }\r\n        this.handleUpdateClick = () => {\r\n            let prop = {\r\n                type : \"Update\",\r\n                id : this.props.uid,\r\n                name : this.state.name === \"/\" ? this.props.name : this.state.name,\r\n                phone : this.state.phone === \"/\" ? this.props.phone : this.state.phone\r\n            }\r\n            this.props.updateData(prop);\r\n            this.setState({\r\n                modalState : false,\r\n                name: \"/\",\r\n                phone : \"/\",\r\n                nameErr: false,\r\n                phoneErr: false,\r\n                phoneRep: false\r\n            });\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        this.setState({\r\n            name : this.props.name,\r\n            phone : this.props.phone\r\n        });\r\n    }\r\n    render() {\r\n        return (\r\n            <>\r\n            <Modal header = \"Edit Entry\"\r\n                open = {this.state.modalState}>\r\n            <div className = \"row\">\r\n                <div className = \"input-field col s6\">\r\n                    <input placeholder = \"Name\" name = \"name\" value = {this.state.name !== \"/\" ? this.state.name : this.props.name} onChange = {this.handleChange} />\r\n                    {this.state.nameErr && <span className = \"helper-text red-text\" >Please enter a valid Name</span>}\r\n                </div>\r\n                <div className = \"input-field col s6\">\r\n                    <input placeholder = \"Phone\" name = \"phone\" value = {this.state.phone !== \"/\" ? this.state.phone : this.props.phone} onChange = {this.handleChange} />\r\n                    {this.state.phoneErr && <span className = \"helper-text red-text\" >Please enter a valid Phone number</span>}\r\n                    {this.state.phoneRep && <span className = \"helper-text red-text\" >Number already exists in the directory!</span>}\r\n                </div>\r\n            </div>\r\n            <div className = \"row\">\r\n                <button className = \"btn modal-btn\" onClick = {this.handleUpdateClick}>Update</button>\r\n                <button className = \"btn delete-btn\" onClick = {this.handleDeleteClick}>Delete</button>\r\n            </div>\r\n            </Modal>    \r\n            <tr onClick = {() => {this.setState({\r\n                modalState : !this.state.modalState\r\n                });\r\n            return this.state.modalState;\r\n            } } className = 'row-wrapper'>\r\n                <td>{this.props.id+1}</td>\r\n                <td>{this.props.name}</td>\r\n                <td>{this.props.phone}</td>\r\n                <td><i class=\"fas fa-pencil-alt\" aria-hidden=\"true\"></i></td>\r\n            </tr>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Lists;","import React, { Component } from 'react';\nimport NavBar from './components/NavBar';\nimport './App.css';\nimport Forms from './components/Forms';\nimport Lists from './components/List';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      search : \"\",\n      items: [],\n      searchRes : []\n    }\n    this.handleSearch = (e) => {\n      e.preventDefault();\n      this.setState({\n        search: e.target.value\n      });\n    }\n    this.handleAdd = (data) => {\n        let newItems = this.state.items;\n        newItems.push(data);\n        this.setState({\n          items : newItems\n        });\n        localStorage.setItem('phonebook',JSON.stringify(newItems));\n    }\n    this.checkNumber = (num) => {\n      let {items} = this.state\n      for(var i=0;i<items.length;i++) {\n        if(items[i].phone === num) {\n          return true;\n        }\n      }\n      return false;\n    }\n    this.updateData = (prop) => {\n      let data = this.state.items;\n      if(prop.type === \"Delete\") {\n          data = data.filter((item) => (item.id !== prop.id));\n      }else if(prop.type === \"Update\") {\n        data.forEach((item) => {\n          if(item.id === prop.id) {\n            item.name = prop.name;\n            item.phone = prop.phone\n          }\n        })\n      }\n      this.setState({\n        items : data\n      });\n      localStorage.setItem('phonebook',JSON.stringify(data));\n  }\n  }\n  componentDidMount() {\n    let data = localStorage.getItem('phonebook');\n    if(data) {\n      this.setState({\n        items : JSON.parse(data)\n      });\n    }\n  }\n  render() {\n    let data = this.state.items;\n    let jsx = [];\n    data.forEach((item , id) => {\n      let str =(item.name + \" \" + item.phone).toLowerCase();\n          if(str.indexOf((this.state.search.toLowerCase())) !== -1) {\n            jsx.push(           \n                <Lists id = {id} name = {item.name} phone = {item.phone} uid = {item.id} updateData = {this.updateData} key = {item.id}/>\n            );      \n          }\n    }); \n    return (\n      <div>\n          <NavBar/>\n          <br/><br/>\n          <div className = \"container\">\n                <Forms search = {this.state.search} handleSearch = {this.handleSearch} handleNewPhone = {this.handleAdd} checkNumber = {this.checkNumber}/>\n                  <table >\n                    <thead>\n                      <>\n                        <th>Id</th>\n                        <th>Name</th>\n                        <th>Phone</th>\n                        <th> </th>\n                      </>\n                    </thead>\n                    <tbody>\n                      {jsx}\n                    </tbody>\n                  </table>\n            <br/><br/>\n            <p className = \"grey-text\">You have {jsx.length} contact(s).</p>\n          </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}